1
Introduction

Tierless web development is a new concept of web application development. This approach tries to blur the distinguish between different tiers of web development in case of reducing complexity of development. Beside investment in novel programming language to realize tier splitting, extend existing technology with distribute feature, such as JavaScript to cater for tier splitting seems more beneficial. To make JavaScript more powerful on tierless web development, we can design a new interpreter of JavaScript which enable it parse tierless JavaScript program. One way to design this kind of interpreter is using static program slicing mechanism.
1.1 Problem statement
With the rapid development of web technologies, the use of internet is existing in everywhere and the number of web application is significantly growth recent year. This kind of evolution of internet makes nowadays web application tending to integrate with emerging technologies and a lot of interactive feature. Traditional three-tier architecture is extensible for realizing such advanced feature but meanwhile increase complexity of web development because each tier comes with its own technology stack. Such feature of traditional three-tier architecture is also leading to complex glue between each technology. For example, the developer of client tier and server tier may be dense about the programming language of each other. Normally, a combination of HTML, JavaScript and CSS is used for client tier development and often together with Ajax and jQuery, and a kind of programming language can be used in server tier development is required up to which web framework is chosen by programmer.
Current approach to reduce such complexity is development of tierless programming languages which try to enable developing a web application by using one programming language. In these languages, a preprocessor or the runtime of language can split source code into client, server and sometimes a database tier. Apparently, the communication between different tiers is also handled by these languages. However, investment on novel programming languages is not a efficient way to release developers from handling with complexity because they require developers annotate code with splitting information in a new language. This is a time-consuming and often error-prone process.
By allowing tierless web application in a general-purpose language supported by existing tool, JavaScript is a good choice. JavaScript is an event-driven language can run on client tier and has been already extended to server tier, such as Node.js. By using program slicing mechanism, we has already developed a tier-splitting tool called STIP.js that is able to split a tierless JavaScript program into client and server tier. 
Program slicing is a mechanism to get subset of the program on a graph presentation of program. The subset out of program slicing is a valid and can be executed independently program. This mechanism is widely used to analysis and understand the behavior of code. 
Currently, the process of STIP.js getting valid subset of program is consist of two part. First, generate a STG(State Transition Graph) by the Jipda abstract interpreter framework for JavaScript.Â This graph is a description of possible states the program can transition to. Then STIP.js constructs PDG(Program Dependency Graph) out of STG. PDG is used as the input of a program slicing algorithm. From the selected node in PDG, slicing algorithm is backward traversing on the basis of data dependency and control dependency, resulting in two subsets of the tierless program: the client and server program.
To get the tier splitting code, the developer only need to annotate their code with @client and @server. 
1.2 Contribution 
This dissertation introduce JipdaSlicer, a new algorithm to based on Jipda abstract interpreter framework to get program slicing. When slice on program, this algorithm can read node in STG directly, whereas, STIP.js reads node in PDG constructed from STG. The work in this dissertation is extending feature of STIP.js. In the new version of STIP.js, we keep all old functionality of it. JipdaSlicer accepts a variable pair containing a line number and a variable identifier from source JavaScript code. This variable pair is a representation of a point in code where the users want to cut off code not involved in this point. The method of query dependency relationship of node in STG is in contrast with slicing on PDG. Once the new algorithm has been invoked, it will find the the all the nodes within a range in STG corresponding to the code in that line. For each node in this range, look up data dependency and control dependency nodes from the top in STG. The process of query takes account into the scope of each node also. And the current JipdaSlicer can deal with statements, function definition, function call, assignment, if statement.
To validation the new solution, we test on different cases. These cases test if JipdaSlicer can give correct program slicing or not from different point of view. As we show, the result of JipdaSlicer is satisfactory.
1.3 Road map
In the rest of this document is structured as follows: in Chapter 2, we talk about program slicing. In the first part, we introduce the basic concept of program slicing. In section 2.2, we introduce the different program slicing technology. Section 2.3 gives the contribution of combination with program slicing in different field.
In Chapter 3, we describe what is abstract interpreter in first section. Then discuss several different interpreter in today. In Section 3.3, we introduce the use of interpreter and what advantage can it gives us.
Chapter 4 is about program slicing on the state transition graph. We explain our implementation of new algorithm in this chapter. The explanation includes: introduce what kind of input is required, which steps does the new algorithm has to produce output, some relevant code.  
Chapter 5 validates the new algorithm, by comparing the result out of STIP.js and JipdaSlicer. This dissertation end with conclusion chapter include work summary and future work.
